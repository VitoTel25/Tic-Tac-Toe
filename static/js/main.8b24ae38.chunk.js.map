{"version":3,"sources":["index.js"],"names":["winCases","Square","value","onClick","className","Board","isGameOver","playLog","onClickSquare","renderSquare","index","find","item","Game","useState","isCirclePlayerRound","setIsCirclePlayerRound","setPlayLog","console","log","checkWin","pValue","indexList","filter","map","some","winCase","every","num","ii","playerValue","winner","gameStatus","prevLog","prev","length","ReactDOM","render","document","getElementById"],"mappings":"oMAOMA,EAAW,CACf,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,wBAAQC,UAAU,SAASD,QAASA,EAApC,SACGD,GAAS,MAKVG,EAAQ,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAC9BC,EAAe,SAACC,GAAW,IAAD,EACxBR,EAAK,UAAGK,EAAQI,MAAK,SAAAC,GAAI,OAAIA,EAAKF,QAAUA,YAAvC,aAAG,EAA4CR,MAQ1D,OACE,cAACD,EAAD,CAAQC,MAAOA,EAAOC,QARJ,WACdG,GAAcJ,GAGlBM,EAAcE,OAQlB,OACE,gCACE,sBAAKN,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,UAMhBI,EAAO,WAAO,IAAD,EACqCC,oBAAS,GAD9C,mBACVC,EADU,KACWC,EADX,OAEaF,mBAAS,IAFtB,mBAEVP,EAFU,KAEDU,EAFC,KAGjBC,QAAQC,IAAI,kBAAmBZ,GAE/B,IAAMa,EAAW,SAACC,GAChB,IAAMC,EAAYf,EAAQgB,QAAO,SAAAX,GAAI,OAAIA,EAAKV,QAAUmB,KAAQG,KAAI,SAAAZ,GAAI,OAAIA,EAAKF,SAEjF,OADcV,EAASyB,MAAK,SAAAC,GAAO,OAAIA,EAAQC,OAAM,SAAAC,GAAG,OAAIN,EAAUG,MAAK,SAAAI,GAAE,OAAIA,IAAOD,YAapFE,EAAcf,EA9EM,IACD,IA8EnBgB,EATAX,EAtEoB,SAwEbA,EAvEY,SA0EhB,KAKHY,EAAaD,EAAM,qBAAiBA,EAAjB,qCAAsDD,GAW/E,OACE,sBAAK1B,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAD,CAAOC,aAAcyB,EAAQxB,QAASA,EAASC,cAR3B,SAACE,GACzBO,GAAW,SAACgB,GAAD,4BAAmBA,GAAnB,CAA4B,CAAEvB,QAAOR,MAAO4B,QACvDd,GAAuB,SAAAkB,GAAI,OAAKA,UAQ9B,sBAAK9B,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SAAyB4B,MACtBzB,EAAQ4B,QACT,wBAAQ/B,UAAU,UAAUD,QAjBX,WACvBc,EAAW,KAgBL,SAAwD,mBASlEmB,IAASC,OACP,cAACxB,EAAD,IACAyB,SAASC,eAAe,W","file":"static/js/main.8b24ae38.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst CIRCLE_PLAYER_VALUE = 'O'\nconst CROSS_PLAYER_VALUE = 'X'\n\nconst winCases = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst Square = ({ value, onClick }) => {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value || ''}\n    </button>\n  );\n}\n\nconst Board = ({ isGameOver, playLog, onClickSquare }) => {\n  const renderSquare = (index) => {\n    const value = playLog.find(item => item.index === index)?.value\n    const handleClick = () => {\n      if (isGameOver || value) {\n        return\n      }\n      onClickSquare(index)\n    }\n\n    return (\n      <Square value={value} onClick={handleClick} />\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nconst Game = () => {\n  const [isCirclePlayerRound, setIsCirclePlayerRound] = useState(false)\n  const [playLog, setPlayLog] = useState([])\n  console.log('Board playLog: ', playLog);\n\n  const checkWin = (pValue) => {\n    const indexList = playLog.filter(item => item.value === pValue).map(item => item.index)\n    const isWin = winCases.some(winCase => winCase.every(num => indexList.some(ii => ii === num)))\n    return isWin\n  }\n\n  const generateWinner = () => {\n    if (checkWin(CIRCLE_PLAYER_VALUE)) {\n      return CIRCLE_PLAYER_VALUE\n    } else if (checkWin(CROSS_PLAYER_VALUE)) {\n      return CROSS_PLAYER_VALUE\n    }\n    return null\n  }\n\n  const playerValue = isCirclePlayerRound ? CIRCLE_PLAYER_VALUE : CROSS_PLAYER_VALUE\n  const winner = generateWinner()\n  const gameStatus = winner ? `Game over, ${winner} is winner` : `Next player: ${playerValue}`\n\n  const handleClickReset = () => {\n    setPlayLog([])\n  }\n\n  const handleClickSquare = (index) => {\n    setPlayLog((prevLog) => ([ ...prevLog, { index, value: playerValue } ]))\n    setIsCirclePlayerRound(prev => !prev)\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board isGameOver={!!winner} playLog={playLog} onClickSquare={handleClickSquare} />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"status\">{gameStatus}</div>\n        {!!playLog.length && (\n          <button className=\"restart\" onClick={handleClickReset}>{'Restart'}</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}